#!/usr/bin/python3
import sys
import subprocess
import argparse

# Find any missing panes, allowing for duplicates
def get_missing_panes(desired_panes, window):
    panes = {}
    for pane in window.panes:
        cmd = pane.get_start_command()
        if cmd in panes:
            panes[pane.get_start_command()] += [pane]
        else:
            panes[pane.get_start_command()] = [pane]

    print("Desired panes with command:", desired_panes)
    print("Found panes with command:", [cmd for cmd in panes])

    nonexistent_panes = []
    for desired_pane in desired_panes:
        if desired_pane not in panes:
            nonexistent_panes += [desired_pane]
        elif len(panes[desired_pane]) > 1:
            panes[desired_pane].pop()
        else:
            panes.pop(desired_pane)

    return nonexistent_panes

class TmuxPane():
    def __init__(self, pane_id, window):
        self.id = pane_id
        self.window = window
        self._metadata = self._get_metadata()

    def get_target(self):
        return "{0}.{1}".format(self.window.get_target(), self.id)

    def _get_metadata(self):
        proc = subprocess.run(
            'tmux display-message -p -t \'{0}\' -F "#{{pane_start_command}}"'.format(self.get_target()), shell=True, capture_output=True)
        out = proc.stdout.decode("utf-8").strip()

        return {
            'start_command' : out
        }

    def get_start_command(self):
        return self._metadata['start_command']

    def __repr__(self):
        return "%s->%s" % (self.get_start_command(), self.get_target())

class TmuxWindow():
    def __init__(self, window_id, session):
        self.id = window_id
        self.session = session
        self._metadata = self._get_metadata()

        proc = subprocess.run(
            'tmux list-panes -t \'{0}\' -F "#{{pane_id}}"'.format(self.get_target()), shell=True, capture_output=True)
        self.panes = [TmuxPane(line, self) for line in proc.stdout.decode("utf-8").split('\n') if len(line) > 0]

    def _get_metadata(self):
        proc = subprocess.run(
            'tmux display-message -p -t \'{0}\' -F "#{{window_name}}"'.format(self.get_target()), shell=True, capture_output=True)
        out = proc.stdout.decode("utf-8").strip()
        out_parts = out.split(':')

        return {
            'name' : out_parts[0]
        }

    def get_name(self):
        return self._metadata['name']

    def get_target(self):
        return "{0}:{1}".format(self.session.get_target(), self.id)

    def split_window(self, pane):
        proc = subprocess.run(
            'tmux split-window -t \'{0}\' -PF "#{{pane_id}}" {1}'.format(
                self.get_target(),
                pane),
            shell=True,
            capture_output=True)
        if proc.returncode != 0:
            raise BaseException(proc.stderr)

        pane = TmuxPane(proc.stdout.decode("utf-8").strip(), self)

        self.panes += [pane]

        return pane

    def switch_to(self):
        proc = subprocess.run(
            'tmux switch-client -t \'{0}\''.format(self.get_target()),
            shell=True,
            capture_output=True)
        if proc.returncode != 0:
            raise BaseException(proc.stderr)

    def rename(self, name):
        proc = subprocess.run(
            'tmux rename-window -t \'{0}\' \'{1}\''.format(
                self.get_target(), name),
            shell=True,
            capture_output=True)

    def __repr__(self):
        return "%s->%s" % (self.get_name(), self.get_target())

# It's faster if we query for all the information upfront and then parse it,
# it seems unnecessary and is more complex to maintain due to parsing more complex
# strings. We can create a data structure that parses it all out and then pass that into
# TmuxSession to create everything. Do it when it's needed.
class TmuxSession():
    def __init__(self, session_id):
        self.id = session_id
        self._metadata = self._get_metadata()

        proc = subprocess.run(
            'tmux list-windows -t \'{0}\' -F "#{{window_id}}"'.format(self.get_target()), shell=True, capture_output=True)
        self.windows = [TmuxWindow(line, self) for line in proc.stdout.decode("utf-8").split('\n') if len(line) > 0]

    def _get_metadata(self):
        proc = subprocess.run(
            'tmux display-message -p -t \'{0}\' -F "#{{session_name}}"'.format(self.get_target()), shell=True, capture_output=True)
        out = proc.stdout.decode("utf-8").strip()
        out_parts = out.split(':')

        return {
            'name' : out_parts[0]
        }

    def get_name(self):
        return self._metadata['name']

    def get_target(self):
        return "%s" % self.id

    def new_window(self, name, pane):
        proc = subprocess.run(
            'tmux new-window -t \'{0}\' -PF "#{{window_id}}" -n {1} {2}'.format(
                self.get_target(),
                name,
                pane),
            shell=True,
            capture_output=True)

        window = TmuxWindow(window_id = proc.stdout.decode("utf-8").strip(), session = self)
        self.windows.append(window)

        return window

    def __repr__(self):
        return "%s->%s" % (self.get_name(), self.get_target())

class Tmux():
    def has_session(session_name):
        proc = subprocess.run('tmux has-session -t {0}'.format(session_name), shell=True, capture_output=True)
        if proc.returncode == 1:
            return False

        return True

    def new_session(session_name, window_name, pane):
        proc = subprocess.run(
            'tmux new-session -d -s "{0}" -n "{1}" -PF "#{{session_id}}" {2}'.format(
                session_name,
                window_name,
                pane),
            shell=True,
            capture_output=True)
        if proc.returncode != 0:
            raise BaseException(proc.stderr)


        session = TmuxSession(session_id = proc.stdout.decode("utf-8").strip())
        return session

    def get_sessions():
        proc = subprocess.run('tmux list-sessions -F "#{session_id}"', shell=True, capture_output=True)
        sessions = [TmuxSession(line) for line in proc.stdout.decode("utf-8").split('\n') if len(line) > 0]

        return sessions


# Useful command to run to debug things:
#   tmux list-panes -a -F "#S:#{window_id}:#{window_name}:#{pane_start_command}"
def run(args):
    session_name = args.session
    desired_panes = args.pane
    window_name = args.window

    target_window = None

    # Enumerate windows after creating the session to ensure we catch the new window name
    sessions = [session for session in Tmux.get_sessions() if session.get_name() == session_name]
    if len(sessions) == 0:
        print("Creating new session: {0}".format(session_name))
        session = Tmux.new_session(session_name = session_name, window_name = window_name, pane = desired_panes[0])
    elif len(sessions) == 1:
        session = sessions[0]
    else:
        raise BaseException("Found multiple sessions with name %s" % session_name)

    windows = [window for window in session.windows if window.get_name() == window_name]
    if len(windows) == 0:
        print("Creating new window for session {0} with name {1}".format(session.get_target(), window_name))
        window = session.new_window(name = window_name, pane = desired_panes[0])
    elif len(windows) == 1:
        print("Found window for session {0} with name {1}".format(session.get_target(), window_name))
        window = windows[0]
    else:
        raise BaseException("Found multiple windows with name %s" % window_name)

    nonexistent_panes = get_missing_panes(desired_panes, window)

    panes = [window.split_window(pane = pane) for pane in nonexistent_panes]
    print("Created", panes)

    # Switch to it after everything is done
    window.switch_to()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Allows creation singleton style windows')
    parser.add_argument('-s', '--session', required=True)
    parser.add_argument('-w', '--window', required=True)
    parser.add_argument('-p', '--pane', required=True, nargs='+')

    run(args = parser.parse_args())
